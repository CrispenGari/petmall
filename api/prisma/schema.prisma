generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String @unique @default(uuid())
  email    String @unique

  firstName String
  lastName String
  verified Boolean @default(false)
  isLoggedIn Boolean @default(false)

  emailVerified Boolean @default(false)

  avatar String?
  password String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

 // relations
  pets     Pet[]
  notifications Notification[]
  comments Comment[]
  reactions Reaction[]
  chats ChatOnUser[]
  messages Message[]
}

model Notification{
  id       String @unique @default(uuid())
  notification String
  read Boolean @default(false)
  petId String
  title String

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model Chat{
  id       String @unique @default(uuid())
  userIds    String[]

  messages Message[]

  users  ChatOnUser[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

model ChatOnUser {

  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId     String

  chat   Chat @relation(fields: [chatId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  chatId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, chatId])
}
model Message{
  id       String @unique @default(uuid())
  message    String


  sender   User @relation(fields: [senderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  senderId String

  chat   Chat @relation(fields: [chatId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  chatId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Pet {
  id   String @unique @default(uuid())
  name String
  age  Int

  description String
  gender      String
  image       String
  category    String
  sold        Boolean @default(false)
  price       Float

  reactions Reaction[]
  comments  Comment[]

  seller   User   @relation(fields: [sellerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sellerId String

  location   Location @relation(fields: [locationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  locationId String   @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Location {
  id             String  @unique @default(uuid())
  lat Float
  lon Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  pet Pet?
}



model Comment {
  id      String @unique @default(uuid())
  comment String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  // relations
  reactions Reaction[]
  commentId String?

  mainComment   Comment?   @relation("CommentsReplies", fields: [commentId], references: [id])
  replies  Comment[]  @relation("CommentsReplies")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  pet       Pet?     @relation(fields: [petId], references: [id])
  petId     String?
}

model Reaction {
  id       String @unique @default(uuid())
  reaction String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  pet   Pet?    @relation(fields: [petId], references: [id])
  petId String?

  comment   Comment? @relation(fields: [commentId], references: [id])
  commentId String?
}
